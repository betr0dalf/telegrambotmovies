import telebot
from telebot import types
import pandas as pd
from background import keep_alive

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ CSV
movies = pd.read_csv('MovieData.csv')

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
movies['ratingKP'] = pd.to_numeric(movies['ratingKP'],
                                   errors='coerce').fillna(0)
movies['ratingImdb'] = pd.to_numeric(movies['ratingImdb'],
                                     errors='coerce').fillna(0)
movies['Year'] = pd.to_numeric(movies['Year'],
                               errors='coerce').fillna(0).astype(int)

# old API 7008011432:AAGzB8Njxp2C8LwxjOCMEh2PomlK-DHIyp4
bot = telebot.TeleBot('7606959553:AAGS4AwiHLHoafx_vuKOxB4mPW1SPSLSTKY')

keep_alive()


@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message)


def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º üçø')
    button2 = types.KeyboardButton('–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É üé•')
    button3 = types.KeyboardButton('–¢–æ–ø —Ñ–∏–ª—å–º—ã –∑–∞ –≥–æ–¥ üî•')
    button4 = types.KeyboardButton('–¢–æ–ø —Ñ–∏–ª—å–º—ã —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ üé¨')
    button5 = types.KeyboardButton('–¢–æ–ø —Ñ–∏–ª—å–º—ã –∞–∫—Ç—ë—Ä–∞ üåü')
    markup.row(button1)
    markup.row(button2, button3)
    markup.row(button4, button5)
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def on_click(message):
    try:
        if message.text == '–ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º üçø':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:')
            bot.register_next_step_handler(msg, search_movie)
        elif message.text == '–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É üé•':
            genres = movies['Genres'].apply(eval).explode().unique()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for genre in genres:
                markup.add(types.KeyboardButton(genre))
            msg = bot.send_message(message.chat.id,
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, select_genre)
        elif message.text == '–¢–æ–ø —Ñ–∏–ª—å–º—ã –∑–∞ –≥–æ–¥ üî•':
            msg = bot.send_message(message.chat.id,
                                   '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–æ–≤:')
            bot.register_next_step_handler(msg, get_year)
        elif message.text == '–¢–æ–ø —Ñ–∏–ª—å–º—ã —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ üé¨':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–∂–∏—Å—Å—ë—Ä–∞:')
            bot.register_next_step_handler(msg, get_director)
        elif message.text == '–¢–æ–ø —Ñ–∏–ª—å–º—ã –∞–∫—Ç—ë—Ä–∞ üåü':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç—ë—Ä–∞:')
            bot.register_next_step_handler(msg, get_actor)
        else:
            bot.send_message(message.chat.id,
                             '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ üëÅÔ∏èüëÑüëÅÔ∏è')
            show_main_menu(message)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        show_main_menu(message)


def get_year(message):
    try:
        year = int(message.text)
        top_movies_by_year(message, year)
    except ValueError:
        bot.send_message(message.chat.id,
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.')
        show_main_menu(message)


def get_director(message):
    director = message.text
    top_movies_by_director(message, director)


def get_actor(message):
    actor = message.text
    top_movies_by_actor(message, actor)


def search_movie(message):
    movie_name = message.text
    found_movies = movies[movies['NameFilm'].str.contains(movie_name,
                                                          case=False,
                                                          na=False)]
    if found_movies.empty:
        msg = bot.send_message(message.chat.id,
                               '–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler(msg, search_movie)
    else:
        movie = found_movies.iloc[0]
        show_movie_details(message, movie)


def select_genre(message):
    genre = message.text
    top_movies_by_genre(message, genre)


def top_movies_by_genre(message, genre):
    genre_movies = movies[movies['Genres'].str.contains(genre)]
    top_movies = genre_movies.nlargest(10, 'ratingKP')

    if top_movies.empty:
        bot.send_message(message.chat.id, '–§–∏–ª—å–º—ã —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        show_main_menu(message)
    else:
        send_top_movies(message, top_movies, genre)


def top_movies_by_year(message, year):
    year_movies = movies[movies['Year'] == year]
    top_movies = year_movies.nlargest(10, 'ratingKP')

    if top_movies.empty:
        bot.send_message(message.chat.id, f'–§–∏–ª—å–º—ã –∑–∞ {year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        show_main_menu(message)
    else:
        send_top_movies(message, top_movies, f'{year} –≥–æ–¥–∞')


def top_movies_by_director(message, director):
    director_movies = movies[movies['Directors'].str.contains(director,
                                                              case=False,
                                                              na=False)]
    top_movies = director_movies.nlargest(10, 'ratingKP')

    if top_movies.empty:
        bot.send_message(message.chat.id,
                         f'–§–∏–ª—å–º—ã —Ä–µ–∂–∏—Å—Å—ë—Ä–∞ {director} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        show_main_menu(message)
    else:
        send_top_movies(message, top_movies, f'—Ä–µ–∂–∏—Å—Å—ë—Ä–∞ {director}')


def top_movies_by_actor(message, actor):
    actor_movies = movies[movies['Actors'].str.contains(actor,
                                                        case=False,
                                                        na=False)]
    top_movies = actor_movies.nlargest(10, 'ratingKP')

    if top_movies.empty:
        bot.send_message(message.chat.id,
                         f'–§–∏–ª—å–º—ã —Å –∞–∫—Ç—ë—Ä–æ–º {actor} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        show_main_menu(message)
    else:
        send_top_movies(message, top_movies, f'—Å –∞–∫—Ç—ë—Ä–æ–º {actor}')


def send_top_movies(message, top_movies, category):
    try:
        movie_list = '\n'.join([
            f"{i + 1}. {row['NameFilm']} - —Ä–µ–π—Ç–∏–Ω–≥ {row['ratingKP']}"
            for i, (_, row) in enumerate(top_movies.iterrows())
        ])
        bot.send_message(message.chat.id,
                         f"–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ {category}:\n{movie_list}")

        markup = types.InlineKeyboardMarkup()
        for _, row in top_movies.iterrows():
            button = types.InlineKeyboardButton(
                f"{row['NameFilm']}", callback_data=f"movie_{row['KPid']}")
            markup.add(button)
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:',
                         reply_markup=markup)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤: {e}')
        show_main_menu(message)


def show_movie_details(message, movie):
    try:
        bot.send_message(
            message.chat.id, f"{movie['NameFilm']} ({int(movie['Year'])})\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {movie['Description']}\n"
            f"–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞: {movie['ratingKP']}\n"
            f"–†–µ–π—Ç–∏–Ω–≥ IMDb: {movie['ratingImdb']}")
        bot.send_photo(message.chat.id, movie['PosterUrl'])
        markup = types.InlineKeyboardMarkup()
        watch_button = types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º',
                                                  url=movie['WebUrl'])
        kp_button = types.InlineKeyboardButton('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ',
                                               url=movie['WebUrl2'])
        markup.add(watch_button)
        markup.add(kp_button)
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                         reply_markup=markup)
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ: {e}')
    show_main_menu(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('movie_'))
def callback_movie_details(call):
    try:
        movie_id = int(call.data.split('_')[1])
        movie = movies[movies['KPid'] == movie_id].iloc[0]
        show_movie_details(call.message, movie)
    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ: {e}')
        show_main_menu(call.message)


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
